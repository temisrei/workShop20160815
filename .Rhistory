?cor
FuelEff <- read.csv("/Users/rei/Downloads/FuelEfficiency.csv")
FuelEff
cor(FuelEff.GPM, FuelEff.MPG)
cor(FuelEff)
FuelEff <- read.csv("/Users/rei/Downloads/FuelEfficiency.csv")
FuelEff
plot(GPM~MPG,data=FuelEff)
toyota <- read.csv("/Users/rei/Downloads/ToyotaCorolla.csv")
toyota <- read.csv("/Users/rei/Downloads/ToyotaCorolla.csv")
toyota
toyota[1:3,]
summary(toyota)
hist(toyota$Price)
hist(toyota$Price)
v1=rep(1,length(toyota$FuelType))
v2=rep(0,length(toyota$FuelType))
toyota$FuelType1=ifelse(toyota$FuelType=="CNG",v1,v2)
toyota$FuelType2=ifelse(toyota$FuelType=="Diesel",v1,v2)
toyota[1:3,]
auto=toyota[-4]
auto
head(auto)
head(toyota)
head(auto)
head(toyota)
head(auto)
head(toyota)
head(auto)
head(toyota)
head(auto)
auto[1:3,]
plot(Price~Age,data=auto)
plot(Price~KM,data=auto)
plot(Price~HP,data=auto)
plot(Price~MetColor,data=auto)
plot(Price~Automatic,data=auto)
plot(Price~CC,data=auto)
plot(Price~Doors,data=auto)
plot(Price~Weight,data=auto)
m1=lm(Price~.,data=auto)
summary(m1)
set.seed(1)
set.seed(1)
?set
??set
?set.seed
n=length(auto$Price)
n1=1000
n2=n-n1
train=sample(1:n,n1)
m1=lm(Price~.,data=auto) ## linear model
m1=lm(Price~.,data=auto[train,])
summary(m1)
pred=predict(m1,newdat=auto[-train,])
obs=auto$Price[-train]
diff=obs-pred
percdiff=abs(diff)/obs
me=mean(diff)
rmse=sqrt(sum(diff**2)/n2)
mape=100*(mean(percdiff))
me   # mean error
rmse # root mean square error
mape # mean absolute percent error
## cross-validation (leave one out)
n=length(auto$Price)
diff=dim(n)
percdiff=dim(n)
for (k in 1:n) {
train1=c(1:n)
train=train1[train1!=k]
m1=lm(Price~.,data=auto[train,])
pred=predict(m1,newdat=auto[-train,])
obs=auto$Price[-train]
diff[k]=obs-pred
percdiff[k]=abs(diff[k])/obs
}
me=mean(diff)
rmse=sqrt(mean(diff**2))
mape=100*(mean(percdiff))
me   # mean error
rmse # root mean square error
mape # mean absolute percent error
## cross-validation (leave one out): Model with just Age
n=length(auto$Price)
diff=dim(n)
percdiff=dim(n)
for (k in 1:n) {
train1=c(1:n)
train=train1[train1!=k]
m1=lm(Price~Age,data=auto[train,])
pred=predict(m1,newdat=auto[-train,])
obs=auto$Price[-train]
diff[k]=obs-pred
percdiff[k]=abs(diff[k])/obs
}
me=mean(diff)
rmse=sqrt(mean(diff**2))
mape=100*(mean(percdiff))
me   # mean error
rmse # root mean square error
mape # mean absolute percent error
## Adding the squares of Age and KM to the model
auto$Age2=auto$Age^2
auto$KM2=auto$KM^2
m11=lm(Price~Age+KM,data=auto)
summary(m11)
m12=lm(Price~Age+Age2+KM+KM2,data=auto)
summary(m12)
m13=lm(Price~Age+Age2+KM,data=auto)
summary(m13)
plot(m11$res~m11$fitted)
hist(m11$res)
plot(m12$res~m12$fitted)
toyota <- read.csv("/Users/rei/Downloads/ToyotaCorolla.csv")
toyota[1:3,]
summary(toyota)
hist(toyota$Price)
v1=rep(1,length(toyota$FuelType))
v2=rep(0,length(toyota$FuelType))
toyota$FuelType1=ifelse(toyota$FuelType=="CNG",v1,v2)
toyota$FuelType2=ifelse(toyota$FuelType=="Diesel",v1,v2)
auto=toyota[-4]
auto[1:3,]
plot(Price~Age,data=auto)
plot(Price~KM,data=auto)
plot(Price~HP,data=auto)
plot(Price~MetColor,data=auto)
plot(Price~Automatic,data=auto)
plot(Price~CC,data=auto)
plot(Price~Doors,data=auto)
plot(Price~Weight,data=auto)
## regression on all data
m1=lm(Price~.,data=auto) ## linear model
?smoothScatter
smoothScatter($Price,$Age)
smoothScatter(Price,Age)
smoothScatter(auto$Price,auto$Age)
plot(Price~Age,data=auto)
smoothScatter(auto$Price,auto$Age)
plot(Price~Age,data=auto)
plot(Price~Age,data=auto)
smoothScatter(auto$Age,auto$Price)
plot(Price~KM,data=auto)
smoothScatter(auto$KM,auto$Price)
plot(Price~HP,data=auto)
smoothScatter(auto$HP,auto$Price)
plot(Price~MetColor,data=auto)
smoothScatter(auto$MetColor,auto$Price)
plot(Price~Automatic,data=auto)
smoothScatter(auto$Automatic,auto$Price)
plot(Price~CC,data=auto)
smoothScatter(auto$CC,auto$Price)
plot(Price~Doors,data=auto)
smoothScatter(auto$Doors,auto$Price)
plot(Price~Weight,data=auto)
smoothScatter(auto$Weight,auto$Price)
?smoothScatter
plot(Price~Age,data=auto)
smoothScatter(auto$Age,auto$Price)
abline(lm(Price~Age,data=auto))
plot(Price~Age,data=auto)
abline(lm(Price~Age,data=auto))
cor(auto)
prostate <- read.csv("/Users/rei/Downloads/prostate.csv")
prostate
library(tree)
install.packages('tree')
library(tree)
pstree <- tree(lcavol ~., data=prostate, mindev=0.1, mincut=1)
pstree <- tree(lcavol ~., data=prostate, mincut=1)
pstree
plot(pstree, col=8)
text(pstree, digits=2)
pstcut <- prune.tree(pstree,k=1.7)
plot(pstcut)
pstcut
pstcut <- prune.tree(pstree,k=2.05)
plot(pstcut)
pstcut
pstcut <- prune.tree(pstree,k=3)
plot(pstcut)
pstcut
pstcut <- prune.tree(pstree)
pstcut
plot(pstcut)
pstcut <- prune.tree(pstree,best=3)
pstcut
plot(pstcut)
## Use cross-validation to prune the tree
set.seed(2)
cvpst <- cv.tree(pstree, K=10)
cvpst$size
cvpst$dev
plot(cvpst, pch=21, bg=8, type="p", cex=1.5, ylim=c(65,100))
pstcut <- prune.tree(pstree, best=3)
pstcut
plot(pstcut, col=8)
text(pstcut)
## Plot what we end up with
plot(prostate[,c("lcp","lpsa")],cex=0.2*exp(prostate$lcavol))
abline(v=.261624, col=4, lwd=2)
lines(x=c(-2,.261624), y=c(2.30257,2.30257), col=4, lwd=2)
?tree
food <- read.csv("/Users/rei/Downloads/protein.csv")
food[1:3,]
set.seed(1) ## to fix the random starting clusters
grpMeat <- kmeans(food[,c("WhiteMeat","RedMeat")], centers=3, nstart=10)
grpMeat
o=order(grpMeat$cluster)
data.frame(food$Country[o],grpMeat$cluster[o])
plot(food$Red, food$White, type="n", xlim=c(3,19), xlab="Red Meat", ylab="White Meat")
text(x=food$Red, y=food$White, labels=food$Country, col=grpMeat$cluster+1)
set.seed(1)
grpProtein <- kmeans(food[,-1], centers=7, nstart=10)
o=order(grpProtein$cluster)
data.frame(food$Country[o],grpProtein$cluster[o])
plot(food$Red, food$White, type="n", xlim=c(3,19), xlab="Red Meat", ylab="White Meat")
text(x=food$Red, y=food$White, labels=food$Country, col=rainbow(7)[grpProtein$cluster])
grpMeat$clustr
grpMeat
grpMeat$cluster+1
plot(food$Red, food$White, type="n", xlim=c(3,19), xlab="Red Meat", ylab="White Meat")
text(x=food$Red, y=food$White, labels=food$Country, col=grpMeat$cluster+1)
grpMeat
food[1:3,]
set.seed(1) ## to fix the random starting clusters
grpMeat <- kmeans(food[,c("Eggs","Milk")], centers=3, nstart=10)
grpMeat
## list of cluster assignments
o=order(grpMeat$cluster)
data.frame(food$Country[o],grpMeat$cluster[o])
## plotting cluster assignments on Red and White meat scatter plot
plot(food$Red, food$White, type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
text(x=food$Red, y=food$White, labels=food$Country, col=grpMeat$cluster+1)
set.seed(1) ## to fix the random starting clusters
grpMeat <- kmeans(food[,c("Eggs","Milk")], centers=3, nstart=10)
grpMeat
## list of cluster assignments
o=order(grpMeat$cluster)
data.frame(food$Country[o],grpMeat$cluster[o])
## plotting cluster assignments on Red and White meat scatter plot
plot(food$Red, food$White, type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
text(x=food$Red, y=food$White, labels=food$Country, col=grpMeat$cluster+1)
food
plot(food$Eggs, food$Milk, type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
text(x=food$Red, y=food$White, labels=food$Country, col=grpMeat$cluster+1)
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
plot(food$Eggs, food$Milk, type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
plot(food$Eggs, food$Milk, type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
?plot
plot(seq(0,25,by=5), food$Milk, type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
plot(seq(0,25,by=5), food$Milk, type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
plot(seq(0,25,by=1), food$Milk, type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
food$Eggs
food$Milk
c[0, food$Milk]
c(0, food$Milk)
plot(food$Eggs, c(0,food$Milk), type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
plot(c(0,food$Eggs), c(0,food$Milk), type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
text(x=food$Red, y=food$White, labels=food$Country, col=grpMeat$cluster+1)
plot(c(0,food$Eggs), c(0,food$Milk), type="n", xlim=c(3,19), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
food$Eggs
plot(c(0,food$Eggs), c(0,food$Milk), type="n", xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
plot(c(0,food$Eggs), c(0,food$Milk), type="n", xlim=c(0,10), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
plot(c(0,food$Eggs), c(0,food$Milk), type="n", xlim=c(0,15), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
plot(c(0,food$Eggs), c(0,food$Milk), type="n", xlim=c(0,5), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
plot(c(0,food$Eggs), c(0,food$Milk), type="n", xlim=c(0,5), ylim=c(0,50), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
plot(food$Eggs, food$Milk, type="n", xlim=c(0,5), ylim=c(0,50), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
food$Eggs
max(food$Eggs)
?stderr
max(food$Eggs)+sd(food$Eggs)
plot(food$Eggs, food$Milk, type="n", xlim=c(0,max(food$Eggs)+sd(food$Eggs)), ylim=c(0,50), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
plot(food$Eggs, food$Milk, type="n", xlim=c(0,max(food$Eggs)+sd(food$Eggs)), ylim=c(0,max(food$Milk)+sd(food$Milk)), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
set.seed(1) ## to fix the random starting clusters
grpMeat <- kmeans(food[,c("Eggs","Milk")], centers=5, nstart=10)
grpMeat
## list of cluster assignments
o=order(grpMeat$cluster)
data.frame(food$Country[o],grpMeat$cluster[o])
## plotting cluster assignments on Red and White meat scatter plot
plot(food$Eggs, food$Milk, type="n", xlim=c(0,max(food$Eggs)+sd(food$Eggs)), ylim=c(0,max(food$Milk)+sd(food$Milk)), xlab="Eggs", ylab="Milk")
text(x=food$Eggs, y=food$Milk, labels=food$Country, col=grpMeat$cluster+1)
library(mixtools)
install.packages('mixtools')
library(mixtools)
food <- read.csv("/Users/rei/Downloads/protein.csv")
food[1:3,]
X=cbind(food[,2],food[,3])
X[1:3,]
set.seed(1)
out2<-mvnormalmixEM(X,arbvar=TRUE,k=2,epsilon=1e-02)
out2
prob1=round(out2$posterior[,1],digits=3)
prob2=round(out2$posterior[,2],digits=3)
prob=round(out2$posterior[,1])
o=order(prob)
data.frame(food$Country[o],prob1[o],prob2[o],prob[o])
plot(food$Red, food$White, type="n",xlab="Red Meat", ylab="White Meat")
text(x=food$Red,y=food$White,labels=food$Country,col=prob+1)
X1=cbind(food[,2],food[,3],food[,4],food[,5],food[,6],food[,7], food[,8],food[,9],food[,10])
X1[1:3,]
set.seed(1)
out2all<-mvnormalmixEM(X1,arbvar=FALSE,k=2,epsilon=1e-02)
out2all
prob1=round(out2all$posterior[,1],digits=3)
prob2=round(out2all$posterior[,2],digits=3)
prob=round(out2all$posterior[,1])
data.frame(food$Country,prob1,prob2,prob)
o=order(prob)
data.frame(food$Country[o],prob[o])
install.packages("jiebaR")
install.packages("wordcloud")
install.packages("wordcloud")
install.packages("stringr")
install.packages("tm")
library(jiebaR)
library(wordcloud)
library(stringr)
library(tm)
getwd()
setwd("/Users/rei/Projects/workShop20160815")
TripText = NULL
TripText <- read.delim(file='85Cafe/85CafeTwn_full.txt', header=FALSE, stringsAsFactors=FALSE)
TripText <- read.delim(file='85Cafe/85CafeTwn_full.txt', header=FALSE, stringsAsFactors=FALSE)
TripText01 <- TripText$V1
TripText02 <- TripText$V2
cc = worker()
words01=NULL
words02=NULL
for (i in 1:length(TripText02)) {
words02[i]=paste(cc[TripText02[i]],collapse = '  |  ')
#words01[i]=paste(TripText01[i],"  ",words02[i],".")
}
wordList=paste(words02,collapse= "")
wordcloud(wordList,scale = c(8, 0.2),min.freq=3,max.words=100)
png("85C/txt_R/85cafewc.png",width=12,height=8,units="in", res=300)
wordcloud(wordList,scale = c(8, 0.2),min.freq=3,max.words=100)
dev.off()
?png()
wordList=paste(words02,collapse= "")
wordcloud(wordList,scale = c(8, 0.2),min.freq=3,max.words=100)
?wordcloud
par(family=(“Heiti TC Light”))
wordList=paste(words02,collapse= "")
par(family=("Heiti TC Light"))
wordList=paste(words02,collapse= "")
wordcloud(wordList,scale = c(8, 0.2),min.freq=3,max.words=100)
png("85C/txt_R/85cafewc.png",width=12,height=8,units="in", res=300)
?png
png("85cafewc.png",width=12,height=8,units="in", res=300)
png(file="85C/txt_R/85cafewc.png",width=12,height=8,units="in", res=300)
wordcloud(wordList,scale = c(8, 0.2),min.freq=3,max.words=100)
png(file="85C/txt_R/85cafewc.png",width=12,height=8,units="in", res=300)
png(file="85Cafe/85cafewc.png",width=12,height=8,units="in",res=300)
wordcloud(wordList,scale = c(8, 0.2),min.freq=3,max.words=100)
dev.off()
TripText$V2 = words02
write.table(TripText, file = "85Cafe/85CafeTwn_full_R.txt", sep="\t",row.names=F,col.names=F)
install.packages("plyr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("e1071")
install.packages("mlbench")
library(plyr)
library(stringr)
library(e1071)
library(mlbench)
library(rpart)
getwd() ## 路徑確認與設定
setwd("/Users/rei/Projects/workShop20160815")
positives= readLines("AFINN/positive-words-Chinese.txt")
positives= readLines("AFINN/positive-words-Chinese.txt")
positives
head(positives)
head(positives)
positives= readLines("AFINN/positive-words-Chinese.txt")
head(positives)
tail(positives)
negatives = readLines("AFINN/negative-words-Chinese.txt")
tail(negatives)
TripText = NULL
TripText <- read.delim(file='85Cafe/85CafeTwn_full_R.txt', header=FALSE, stringsAsFactors=FALSE)
TripText01 <- TripText$V1
TripText02 <- TripText$V2
sentiment_score <- function(sentences, negTerms, posTerms){
final_scores <- matrix('', 0, 3)
scores <- laply(sentences, function(sentence,  negTerms, posTerms ){
initial_sentence <- sentence
#remove unnecessary characters and split up by word
sentence <- gsub('[[:punct:]]', '', sentence)
sentence <- gsub('[[:cntrl:]]', '', sentence)
sentence <- gsub('\\d+', '', sentence)
sentence <- tolower(sentence)
wordList <- str_split(sentence, '\\s+')
words <- unlist(wordList)
#build vector with matches between sentence and each category
posMatches <- match(words, posTerms)
negMatches <- match(words, negTerms)
#sum up number of words in each category
posMatches <- sum(!is.na(posMatches))
negMatches <- sum(!is.na(negMatches))
score <- c(negMatches, posMatches)
#add row to scores table
newrow <- c(initial_sentence, score)
final_scores <- rbind(final_scores, newrow)
return(final_scores)
},  negTerms, posTerms)
return(scores)
}
score = as.data.frame(sentiment_score(TripText02, positives, negatives))
colnames(score) <- c('sentence', 'neg', 'pos')
write.table(score, file = "85Cafe/85CafeTwn_ful_R.csv", sep = ",",row.names=FALSE)
?score()
?martic()
?martic
??martic
head(score)
View(score)
score(9)
score[,9]
score[9,]
?gsub
posText <- read.delim(file='polarityData/polaritydata-chinese/positive-polarity-chinese-R.txt', header=FALSE, stringsAsFactors=FALSE)
install.packages("plyr")
install.packages("plyr")
library(plyr)
library(stringr)
library(e1071)
library(mlbench)
library(rpart)
getwd() ## 路徑確認與設定
setwd("/Users/rei/Projects/workShop20160815")
#load up positive and negative words
positives= readLines("AFINN/positive-words-Chinese.txt")
negatives = readLines("AFINN/negative-words-Chinese.txt")
#load up positive and negative sentences and format
posText <- read.delim(file='polarityData/polaritydata-chinese/positive-polarity-chinese-R.txt', header=FALSE, stringsAsFactors=FALSE)
posText <- read.delim(file='polarityData/polaritydata-chinese/positive-polarity-chinese-R.txt', header=FALSE, stringsAsFactors=FALSE)
posText <- posText$V1
posText <- unlist(lapply(posText, function(x) { str_split(x, "\n[\\.!?]+") }))
negText <- read.delim(file='polarityData/polaritydata-chinese/negative-polarity-chinese-R.txt', header=FALSE, stringsAsFactors=FALSE)
negText <- negText$V1
negText <- unlist(lapply(negText, function(x) { str_split(x, "\n[\\.!?]+") }))
sentiment_score <- function(sentences, negTerms, posTerms){
final_scores <- matrix('', 0, 3)
scores <- laply(sentences, function(sentence,  negTerms, posTerms ){
initial_sentence <- sentence
#remove unnecessary characters and split up by word
sentence <- gsub('[[:punct:]]', '', sentence)
sentence <- gsub('[[:cntrl:]]', '', sentence)
sentence <- gsub('\\d+', '', sentence)
sentence <- tolower(sentence)
wordList <- str_split(sentence, '\\s+')
words <- unlist(wordList)
#build vector with matches between sentence and each category
posMatches <- match(words, posTerms)
negMatches <- match(words, negTerms)
#sum up number of words in each category
posMatches <- sum(!is.na(posMatches))
negMatches <- sum(!is.na(negMatches))
score <- c(negMatches, posMatches)
#add row to scores table
newrow <- c(initial_sentence, score)
final_scores <- rbind(final_scores, newrow)
return(final_scores)
},  negTerms, posTerms)
return(scores)
}
#build tables of positive and negative sentences with scores
posResult <- as.data.frame(sentiment_score(posText, negatives, positives))
negResult <- as.data.frame(sentiment_score(negText, negatives, positives))
posResult <- cbind(posResult, 'positive')
#posResult <- cbind(posResult, '1')
negResult <- cbind(negResult, 'negative')
#negResult <- cbind(negResult, '2')
colnames(negResult) <- c('sentence', 'neg', 'pos', 'sentiment')
colnames(posResult) <- c('sentence', 'neg', 'pos',  'sentiment')
#combine the positive and negative tables
results <- rbind(posResult, negResult)
#run the naive bayes algorithm using all four categories
classifier <- naiveBayes(results[,2:3], results[,4])
predictTable <- predict(classifier, results[,2:3])
predictTable
#####################  #load up TripAdvisor reviewr ###############################
TripText = NULL
TripText <- read.delim(file='85Cafe/85CafeTwn_full_R.txt', header=FALSE, stringsAsFactors=FALSE)
TripText01 <- TripText$V1
TripText02 <- TripText$V2
scoreResult = as.data.frame(sentiment_score(TripText02, positives, negatives))
scoreResult<- cbind(scoreResult, 'sentiment')
colnames(scoreResult) <- c('sentence', 'neg', 'pos', 'sentiment')
predictTable <- predict(classifier, scoreResult)
predictTable
scoreResult<- cbind(scoreResult, predict(classifier, scoreResult))
write.table(scoreResult, file = "85Cafe/85CafeTwn_ful_R.csv", sep = ",",row.names=FALSE)
View(scoreResult)
View(scoreResult)
?naiveBayes
?predict
